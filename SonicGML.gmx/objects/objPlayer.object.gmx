<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

xsp = 0; // XSPEED, in other words: horizontal speed
ysp = 0; // YSPEED, in other words: vertical speed
gsp = 0; // GROUND SPEED, in other words: how fast the player is going on the ground, regardless of angle

left  = false; // Is the left key held down?
right = false; // Is the right key held down?
up    = false; // Is the up key held down?
down  = false; // Is the down key held down?

fleft   = false; // facing left?
sensorA = false; // sensor on the left of the player
sensorB = false; // sensor on the right of the player
sensorC = false; // sensor that detects collisions horizontally
center  = false;
p       = 0;
roll    = false;

acc = 0.046875; // acceleration
dec = 0.5;      // deceleration
frc = 0.046875; // friction
top = 6;        // top speed when using the directional keys to move
grv = 0.21875;  // gravity
jmp = 6.5;      // jump velocity
slp = 0.125;    // slope factor
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Keys

left  = keyboard_check(vk_left)  || gamepad_axis_value(0, gp_axislh) &lt; -0.5;
right = keyboard_check(vk_right) || gamepad_axis_value(0, gp_axislh) &gt; 0.5;
up    = keyboard_check(vk_up)    || gamepad_axis_value(0, gp_axislv) &lt; -0.5;
down  = keyboard_check(vk_down)  || gamepad_axis_value(0, gp_axislv) &gt; 0.5;
drel  = keyboard_check_released(vk_down);
jump  = keyboard_check_pressed(ord('Z')) || gamepad_button_check_pressed(0, gp_face1);
jrel  = keyboard_check_released(ord('Z')) || gamepad_button_check_released(0, gp_face1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

if (left) {
    fleft = true;
    if (xsp &gt; 0) {
        xsp -= dec;
    } else if (xsp &gt; -top &amp;&amp; !roll) {
        xsp -= acc;
    }
} else if (right) {
    fleft = false;
    if (xsp &lt; 0) {
        xsp += dec;
    } else if (xsp &lt; top &amp;&amp; !roll) {
        xsp += acc;
    }
} else {
    xsp -= min(abs(xsp), frc) * sign(xsp);
}

// Gravity and Jumping

ysp += grv;
if (ysp &gt; 16) { ysp = 16; }

if (sensorA || sensorB) {
    if (jump &amp;&amp; !down) {
        ysp = -jmp;
    }
} else {
    if (jrel &amp;&amp; ysp &lt; -4) {
        ysp = -4;
    }
}

if (xsp == 0 &amp;&amp; down) {
    if (jump) {
        if (p &lt;= 8) { p  += 2; }
        p   = p - ((p / 0.125) / 256);
    }
}

if (p &gt; 8) { p = 8; }
if (abs(xsp) &lt; 2 &amp;&amp; roll || !center) { roll = false; }

if (drel &amp;&amp; p &gt; 0) {
    xsp = (8 + (floor(p) / 2)) * image_xscale;
    roll = true;
    p   = 0;
}

// Applying the XSP and YSP to the X and Y of the charracter respectively

x += xsp;
y += ysp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision Detection

// Wall Detection
for (var i = x-10; i &lt;= x+10; i++) {
    if (tilecollision(i, y+4)) { xsp = 0; x = iff((x &gt;= i), x+10-(x%16), x+6-(x%16)); if (left || right) { sensorC = true; } break; } else { sensorC = false; }
}

// Ground Detection
for (var i = 0; i &lt;= 20; i+=0.01) {
    if (!sensorA &amp;&amp; tilecollision(x-8, y+i)) { ysp = 0; y = round(y-20+i); sensorA = true; }  // Sensor A
    else if (!sensorA &amp;&amp; position_meeting(x-8, y+i, objBridge)) { ysp = 0; y = round(y-20+i); sensorA = true; } else { sensorA = false; }
    if (!sensorB &amp;&amp; tilecollision(x+8, y+i)) { ysp = 0; y = round(y-20+i); sensorB = true; }  // Sensor B
    else if (!sensorB &amp;&amp; position_meeting(x+8, y+i, objBridge)) { ysp = 0; y = round(y-20+i); sensorB = true; } else { sensorB = false; }
}

// Center
for (var i = 0; i &lt;= 20; i+=0.01) {
    if (!center &amp;&amp; tilecollision(x, y+i)) { center = true; }  
    else if (!center &amp;&amp; position_meeting(x, y+i, objBridge)) { center = true;} 
    else { center = false; } // Sensor C
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Sprites

if (xsp == 0 &amp;&amp; (center || sensorA || sensorB)) {
    if (!sensorC &amp;&amp; !left &amp;&amp; !right) {
        if (center || sensorA &amp;&amp; !sensorB &amp;&amp; fleft || sensorB &amp;&amp; !sensorA &amp;&amp; !fleft) {
            if (spriteidle != undefined &amp;&amp; sprite_index != spriteidle &amp;&amp; !down) {
                sprite_index = spriteidle;
                image_index  = 0;
                roll = false;
            } else if (spriteduck != undefined &amp;&amp; sprite_index != spriteduck &amp;&amp; down &amp;&amp; p == 0) {
                sprite_index = spriteduck;
                image_index  = 0;
                image_speed = 0.3;
            } else if (spritespindash != undefined &amp;&amp; sprite_index != spritespindash &amp;&amp; down &amp;&amp; p &gt; 0) {
                sprite_index = spritespindash;
                image_index  = 0;
                image_speed = 0.2 * p;
            }
        } else if (sensorA &amp;&amp; !sensorB &amp;&amp; !fleft &amp;&amp; !center || sensorB &amp;&amp; !sensorA &amp;&amp; fleft &amp;&amp; !center) {
            if (spritebalance != undefined &amp;&amp; sprite_index != spritebalance) {
                sprite_index = spritebalance;
                image_index = 0;
            }
        }
    } else if (sensorC &amp;&amp; (center || sensorA || sensorB)) {
        if(left || right) {
            if (spritepush != undefined &amp;&amp; sprite_index != spritepush) {
                sprite_index = spritepush;
                image_index = 0;
            }
        }
    }
} else if (abs(xsp) &lt; top &amp;&amp; (center || sensorA || sensorB)) {
    if (spritewalk != undefined &amp;&amp; sprite_index != spritewalk &amp;&amp; !roll) {
        sprite_index = spritewalk;
        image_index  = 0;
    } else if (spritejump != undefined &amp;&amp; sprite_index != spritejump &amp;&amp; roll) {
        sprite_index = spritejump;
        image_index  = 0;
    }
} else if (spriterun != undefined &amp;&amp; sprite_index != spriterun &amp;&amp; center &amp;&amp; !roll) {
    sprite_index = spriterun;
    image_index  = 0;
} else if (roll) {
    if (spritejump != undefined &amp;&amp; sprite_index != spritejump &amp;&amp; center) { 
        sprite_index = spritejump;
        image_index  = 0;
    }
} else if (jump &amp;&amp; spritejump != undefined &amp;&amp; sprite_index != spritejump &amp;&amp; ysp &lt; 0) {
    sprite_index = spritejump;
    image_index  = 0;
}

image_xscale = iff(fleft, -1, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sprSonicDuck) {
    image_speed = 0;
    image_index = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
